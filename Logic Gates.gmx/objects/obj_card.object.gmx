<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_card</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize card object

//Color options
enum colors {
    red,
    blue,
    yellow,
    white,
    black
}

//Animation
image_speed = 0;

//Selection
selected = false;

//Stats
effect = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the cards on the screen

//Check if the card object exists in the Hand list
if ds_list_find_index(obj_deck.hand, self) &gt;= 0  {

    //Set the coordinates of the card to be drawn on the screen
    x = obj_deck.xhand + obj_deck.xhand*ds_list_find_index(obj_deck.hand, self) + obj_deck.spacing;
    
    //Special case for when the card is clicked on
    if selected{
        y = obj_deck.yhand - 40;
       
    }
    else{
        y = obj_deck.yhand;
    }
    
    visible = true;
}

//Check if the card object exists in the Queue list
else if ds_list_find_index(obj_deck.queue, self) &gt;= 0  {

    //Set the coordinates of the card to be drawn on the screen
    x = obj_deck.xqueue + obj_deck.xqueue*ds_list_find_index(obj_deck.queue, self) + obj_deck.spacing;
    
    //Special case for when the card is clicked on
    if selected{
        y = obj_deck.yqueue - 80;
    }
    else{
        y = obj_deck.yqueue;
    }
     
    visible = true;
}

//If the card is not in the Hand or Queue lists then hide it and place it to 0,0
else {
    visible = false;
    x = 0;
    y = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mark card selection upon click

if not selected {
    selected  = true;
}

else selected = false;


/*
//ds_list_delete(obj_deck.hand, ds_list_find_index(obj_deck.hand, self));

//Check if a card in the haand is clicked to be moved to the queue
if ds_list_find_index(obj_deck.hand, self) &gt;= 0 {
    ds_list_delete(obj_deck.hand, ds_list_find_index(obj_deck.hand, self));
    ds_list_add(obj_deck.queue, self);
}

//Check if a card in the queue is clicked to be moved to the hand
else if ds_list_find_index(obj_deck.queue, self) &gt;= 0 {
    ds_list_delete(obj_deck.queue, ds_list_find_index(obj_deck.queue, self));
    ds_list_add(obj_deck.hand, self);
}

/*
with obj_deck{
    for(var i = ds_list_size(hand); i &lt; hand_size; i++){
        ds_list_add(hand, ds_list_find_value(temp_deck, ds_list_size(temp_deck) -1));
        ds_list_delete(temp_deck, ds_list_size(temp_deck) -1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if selected{
    draw_sprite_ext(spr_card, 5,x,y,1.07,1.07,0,c_yellow,1);
    
    draw_sprite(spr_card,-1,x,y);
    
}

else draw_sprite(spr_card,-1,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
